{
  "ver": "1.0.25",
  "uuid": "d7f5ee82-07fc-497f-91f8-2469e95f4e19",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float time;\nuniform float textureWidth;\nuniform float fuzzyCount;\nvec4 frag () {\n  vec2 uv = v_uv0;\n  if(time + uv.x < 0.0){\n    discard;\n  }\n  uv.x = fract(time + uv.x);\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, uv);\n    if(fuzzyCount > 0.0){\n    vec4 c = vec4(0,0,0,0);\n    float count = 0.0;\n    float wInv = 1.0 / textureWidth;\n    if(uv.x < wInv * fuzzyCount){\n      uv.x = wInv * fuzzyCount;\n    }\n    for(int i=0;i<100;++i){\n      if(count > fuzzyCount){\n        break;\n      }\n      c += texture2D(texture,uv);\n      uv.x -= wInv;\n      count += 1.0;\n    }\n    c /= fuzzyCount;\n    ALPHA_TEST(c);\n    c.a *=2.0;\n    return c;\n    }\n  #endif\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform timeOffset{\n  float time;\n};\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform timeOffset{\n   float time;\n};\nuniform fuzzy {\n  float textureWidth;\n  float fuzzyCount;\n};\nvec4 frag () {\n  vec2 uv = v_uv0;\n  if(time + uv.x < 0.0){\n    discard;\n  }\n  uv.x = fract(time + uv.x);\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, uv);\n    if(fuzzyCount > 0.0){\n    vec4 c = vec4(0,0,0,0);\n    float count = 0.0;\n    float wInv = 1.0 / textureWidth;\n    if(uv.x < wInv * fuzzyCount){\n      uv.x = wInv * fuzzyCount;\n    }\n    for(int i=0;i<100;++i){\n      if(count > fuzzyCount){\n        break;\n      }\n      c += texture(texture,uv);\n      uv.x -= wInv;\n      count += 1.0;\n    }\n    c /= fuzzyCount;\n    ALPHA_TEST(c);\n    c.a *=2.0;\n    return c;\n    }\n  #endif\n  return o;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      }
    }
  ],
  "subMetas": {}
}